Question 1: 
We can check if two strings are anagram by counting number of characters of the strings. After we count the characters,
we need to compare the substring from the main string. The substring will have the same length as the string which
we are comparing to. If any set of the compared string is an anagram of the main string, then return true else false.
The comparison of the characters will be done in constant time. The for loop will have O(len(original_string)) in
the worst case. So the time complexity for this program is O(n), where n is the length of the main string. The space
complexity of the alogrithm will be a constant, i.e. O(1) as we are storing the strings and their respective lengths
only. 

Question 2:
The solution finds the longest palindromic substring by going over all the combinaitons starting at the index 0. The worst
case time complexity of this solution is O(n^2), where n is  the  number of letters in the given string. The space
complexity is O(1) because we only store the left_index, right_index, longest, and the longest_pal variable.

Question 4:
In this problem we can find the lowest common parent by storing all the ancestors of one node and comparing it with
all the parent nodes of the other node. In the worst case the time complexity will be O(n) if the tree is not balanced
because we might need to go through the tree as if it was a linear data structure. The space complexity will be O(1)
as we only have variables and one list to keep track of. 

Question 5:
In this question we can find the mth element form the end of the list by implementing a LinkedList class. I wrote a
method "push" to insert elements at the end of the linked list. The method question5 returns the mth element from the
end of the list by looping until the (length-m-1) is found,i.e. the mth element is found. The worst time complexity for
pusing an element into the list is O(n), where n is the number of elements in the list. The worst time complexity of
getting the mth element from the end is also O(n). The space complexity is O(1) because we are using only variables.